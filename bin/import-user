#!/usr/bin/env perl

use strict;
use warnings;
use 5.028;
use MetaCPAN::Client;
use DBD::Pg;
use URI;
use Cpanel::JSON::XS qw( decode_json );
use LWP::UserAgent;
use HTML::HTML5::Entities qw( decode_entities );
use YAML qw( Dump );

my $mcpan = MetaCPAN::Client->new;
my $author = shift(@ARGV) // 'PLICEASE';
my $dbh = DBI->connect('dbi:Pg:db=frooble3', 'frooble3', 'frooble3', { AutoCommit => 0, RaiseError => 1 });

# update release table for author:
{
  my @dist;

  foreach my $status (qw( latest cpan ))
  {
    my $spec = $mcpan->release({
      all => [
        { status => $status },
        { author => $author },
      ],
    });

    while(my $item = $spec->next)
    {
      push @dist, [ $item->distribution, $item->version, $item->status ];
    }
  }

  @dist = sort { $a->[0] cmp $b->[0] } @dist;

  $dbh->do(q{
    UPDATE
      release
    SET
      type = 'unknown'
    WHERE
      author = ? AND
      type IN ('cpan','latest')
  }, {}, $author);

  my $lookup_release_sth = $dbh->prepare(q{ SELECT lookup_release(?,?) AS id });

  foreach my $d (@dist)
  {
    my($dist, $version, $status) = @$d;

    $lookup_release_sth->execute($dist, $version);
    my $h = $lookup_release_sth->fetchrow_hashref;
    die "unable to create release for $dist / $version"
      unless $h;

    $dbh->do(q{
      UPDATE
        release
      SET
        author = ?,
        type = ?
      WHERE
        id = ?
    }, {}, $author, $status, $h->{id});
  }

}

# cursor through "unknown" and see if they need to be marked as "backpan"
{
  my $sth = $dbh->prepare(q{
    SELECT
      id, dist, version
    FROM
      release
    WHERE
      type = 'unknown'
  });

  $sth->execute;
  while(my $h = $sth->fetchrow_hashref)
  {
    my $release = $mcpan->release({
      all => [
        { distribution => $h->{dist}    },
        { version      => $h->{version} },
      ],
    })->next;

    unless(defined $release)
    {
      say STDERR "@{[ $h->{dist} ]}-@{[ $h->{version} ]} not found on metacpan";
      next;
    }

    $dbh->do(q{
      UPDATE
        release
      SET
        author = ?,
        type = ?
      WHERE
        id = ?
    }, {}, $release->author, $release->status, $h->{id});
  }

  $dbh->commit;
}

# fetch reports from ct
{
  my $select = $dbh->prepare(q{
    SELECT
      dist, version
    FROM
      release
    WHERE
      type IN ('cpan','latest') AND
      author = ?
  });
  $select->execute($author);

  # Accept: application/json
  my $ua = LWP::UserAgent->new;
  $ua->default_header( Accept => 'application/json' );
  my $base_uri = URI->new('https://api.cpantesters.org');

  my @fields = qw( dist grade guid osname osvers platform perl reporter version );

  my $insert = $dbh->prepare(qq{
    INSERT INTO report (@{[ join(',', @fields) ]}) VALUES (@{[ join(',', map { '?' } @fields) ]})
  });

  my $check = $dbh->prepare(q{
    SELECT guid FROM report WHERE guid = ?
  });

  while(my $h = $select->fetchrow_hashref)
  {
    my $uri = $base_uri->clone;
    $uri->path("/v3/summary/@{[ $h->{dist} ]}/@{[ $h->{version} ]}");
    my $res = $ua->get($uri);

    if($res->is_success)
    {
      say "@{[ $h->{dist} ]}-@{[ $h->{version} ]}";
      my %count;
      foreach my $report ( decode_json($res->decoded_content)->@* )
      {
        $check->execute($report->{guid});
        next if $check->fetchrow_hashref;
        $count{$report->{grade}}++;
        $report->{reporter} = decode_entities $report->{reporter};
        my %r = %$report;
        my $date = delete $r{date};
        my @values = map { delete $r{$_} } @fields;
        if(%r)
        {
          print STDERR Dump($report);
          die "extra fields: @{[ sort keys %r ]}";
        }
        $insert->execute(@values);
      }
      print Dump(\%count);
      $dbh->commit;
    }
    else
    {
      say STDERR $res->status_line;
    }
  }
}

#---
#date: 2019-03-04T01:04:00Z
#dist: Alien-automake
#grade: pass
#guid: 6eb2669a-3e19-11e9-9c48-7da8cead5ccb
#osname: linux
#osvers: 4.14.0-3-amd64
#perl: 5.29.8
#platform: x86_64-linux-ld
#reporter: '"Andreas J. K?nig (ANDK)" <andreas.koenig.gmwojprw@franz.ak.mind.de ((Andreas J. Koenig))>'
#version: 0.14

